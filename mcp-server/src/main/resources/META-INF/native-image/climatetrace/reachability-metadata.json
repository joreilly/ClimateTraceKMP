{
  "reflection": [
    {
      "type": "[Lio.ktor.network.selector.SelectInterest;"
    },
    {
      "type": "[Ljava.lang.Object;"
    },
    {
      "type": "io.ktor.client.HttpClient",
      "fields": [
        {
          "name": "closed"
        }
      ]
    },
    {
      "type": "io.ktor.client.content.ProgressListener"
    },
    {
      "type": "io.ktor.client.engine.HttpClientEngineBase",
      "fields": [
        {
          "name": "closed"
        }
      ]
    },
    {
      "type": "io.ktor.client.engine.java.JavaHttpEngineContainer"
    },
    {
      "type": "io.ktor.client.plugins.HttpSend"
    },
    {
      "type": "io.ktor.client.plugins.api.ClientPluginImpl"
    },
    {
      "type": "io.ktor.client.plugins.api.ClientPluginInstance"
    },
    {
      "type": "io.ktor.client.plugins.logging.HttpClientCallLogger"
    },
    {
      "type": "io.ktor.http.ContentType"
    },
    {
      "type": "io.ktor.http.HttpStatusCode"
    },
    {
      "type": "io.ktor.network.selector.InterestSuspensionsMap",
      "fields": [
        {
          "name": "acceptHandlerReference"
        },
        {
          "name": "connectHandlerReference"
        },
        {
          "name": "readHandlerReference"
        },
        {
          "name": "writeHandlerReference"
        }
      ]
    },
    {
      "type": "io.ktor.network.selector.LockFreeMPSCQueue",
      "fields": [
        {
          "name": "curRef"
        }
      ]
    },
    {
      "type": "io.ktor.network.selector.LockFreeMPSCQueueCore",
      "fields": [
        {
          "name": "nextRef"
        },
        {
          "name": "stateRef"
        }
      ]
    },
    {
      "type": "io.ktor.network.selector.SelectableBase",
      "fields": [
        {
          "name": "_interestedOps"
        }
      ]
    },
    {
      "type": "io.ktor.serialization.kotlinx.json.KotlinxSerializationJsonExtensionProvider"
    },
    {
      "type": "io.ktor.server.application.PluginInstance"
    },
    {
      "type": "io.ktor.server.engine.BaseApplicationResponse"
    },
    {
      "type": "io.ktor.server.routing.RoutingCall"
    },
    {
      "type": "io.ktor.server.routing.RoutingRoot"
    },
    {
      "type": "io.ktor.util.Attributes"
    },
    {
      "type": "io.ktor.util.collections.CopyOnWriteHashMap",
      "fields": [
        {
          "name": "current"
        }
      ]
    },
    {
      "type": "io.ktor.util.internal.LockFreeLinkedListNode",
      "fields": [
        {
          "name": "_next"
        },
        {
          "name": "_prev"
        },
        {
          "name": "removedRef"
        }
      ]
    },
    {
      "type": "io.modelcontextprotocol.kotlin.sdk.CallToolRequest",
      "fields": [
        {
          "name": "Companion"
        }
      ]
    },
    {
      "type": "io.modelcontextprotocol.kotlin.sdk.CallToolRequest$Companion",
      "methods": [
        {
          "name": "serializer",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.modelcontextprotocol.kotlin.sdk.InitializeRequest",
      "fields": [
        {
          "name": "Companion"
        }
      ]
    },
    {
      "type": "io.modelcontextprotocol.kotlin.sdk.InitializeRequest$Companion",
      "methods": [
        {
          "name": "serializer",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.modelcontextprotocol.kotlin.sdk.ListToolsRequest",
      "fields": [
        {
          "name": "Companion"
        }
      ]
    },
    {
      "type": "io.modelcontextprotocol.kotlin.sdk.ListToolsRequest$Companion",
      "methods": [
        {
          "name": "serializer",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.modelcontextprotocol.kotlin.sdk.PingRequest",
      "fields": [
        {
          "name": "Companion"
        }
      ]
    },
    {
      "type": "io.modelcontextprotocol.kotlin.sdk.PingRequest$Companion",
      "methods": [
        {
          "name": "serializer",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.modelcontextprotocol.kotlin.sdk.server.Server",
      "fields": [
        {
          "name": "_prompts"
        },
        {
          "name": "_resources"
        },
        {
          "name": "_tools"
        }
      ]
    },
    {
      "type": "io.modelcontextprotocol.kotlin.sdk.shared.Protocol",
      "fields": [
        {
          "name": "_notificationHandlers"
        },
        {
          "name": "_progressHandlers"
        },
        {
          "name": "_requestHandlers"
        },
        {
          "name": "_responseHandlers"
        }
      ]
    },
    {
      "type": "java.lang.ClassValue"
    },
    {
      "type": "java.net.StandardSocketOptions"
    },
    {
      "type": "kotlin.Any"
    },
    {
      "type": "kotlin.Boolean"
    },
    {
      "type": "kotlin.Metadata",
      "methods": [
        {
          "name": "bv",
          "parameterTypes": []
        },
        {
          "name": "d1",
          "parameterTypes": []
        },
        {
          "name": "d2",
          "parameterTypes": []
        },
        {
          "name": "k",
          "parameterTypes": []
        },
        {
          "name": "mv",
          "parameterTypes": []
        },
        {
          "name": "pn",
          "parameterTypes": []
        },
        {
          "name": "xi",
          "parameterTypes": []
        },
        {
          "name": "xs",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "kotlin.SafePublicationLazyImpl",
      "fields": [
        {
          "name": "_value"
        }
      ]
    },
    {
      "type": "kotlin.Unit"
    },
    {
      "type": "kotlin.collections.List"
    },
    {
      "type": "kotlin.jvm.internal.DefaultConstructorMarker"
    },
    {
      "type": "kotlin.reflect.jvm.internal.ReflectionFactoryImpl",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition"
    },
    {
      "type": "kotlin.reflect.jvm.internal.impl.load.java.FieldOverridabilityCondition"
    },
    {
      "type": "kotlin.reflect.jvm.internal.impl.load.java.JavaIncompatibilityRulesOverridabilityCondition"
    },
    {
      "type": "kotlinx.coroutines.CancellableContinuationImpl",
      "fields": [
        {
          "name": "_decisionAndIndex$volatile"
        },
        {
          "name": "_parentHandle$volatile"
        },
        {
          "name": "_state$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.CancelledContinuation",
      "fields": [
        {
          "name": "_resumed$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.CompletedExceptionally",
      "fields": [
        {
          "name": "_handled$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.EventLoopImplBase",
      "fields": [
        {
          "name": "_delayed$volatile"
        },
        {
          "name": "_isCompleted$volatile"
        },
        {
          "name": "_queue$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.JobSupport",
      "fields": [
        {
          "name": "_parentHandle$volatile"
        },
        {
          "name": "_state$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.JobSupport$Finishing",
      "fields": [
        {
          "name": "_exceptionsHolder$volatile"
        },
        {
          "name": "_isCompleting$volatile"
        },
        {
          "name": "_rootCause$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.flow.StateFlowImpl",
      "fields": [
        {
          "name": "_state$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.internal.ConcurrentLinkedListNode",
      "fields": [
        {
          "name": "_next$volatile"
        },
        {
          "name": "_prev$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.internal.DispatchedContinuation",
      "fields": [
        {
          "name": "_reusableCancellableContinuation$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.internal.LimitedDispatcher",
      "fields": [
        {
          "name": "runningWorkers$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.internal.LockFreeLinkedListNode",
      "fields": [
        {
          "name": "_next$volatile"
        },
        {
          "name": "_prev$volatile"
        },
        {
          "name": "_removedRef$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.internal.LockFreeTaskQueue",
      "fields": [
        {
          "name": "_cur$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.internal.LockFreeTaskQueueCore",
      "fields": [
        {
          "name": "_next$volatile"
        },
        {
          "name": "_state$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.internal.Segment",
      "fields": [
        {
          "name": "cleanedAndPointers$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.internal.ThreadSafeHeap",
      "fields": [
        {
          "name": "_size$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.scheduling.CoroutineScheduler",
      "fields": [
        {
          "name": "_isTerminated$volatile"
        },
        {
          "name": "controlState$volatile"
        },
        {
          "name": "parkedWorkersStack$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.scheduling.CoroutineScheduler$Worker",
      "fields": [
        {
          "name": "workerCtl$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.scheduling.WorkQueue",
      "fields": [
        {
          "name": "blockingTasksInBuffer$volatile"
        },
        {
          "name": "consumerIndex$volatile"
        },
        {
          "name": "lastScheduledTask$volatile"
        },
        {
          "name": "producerIndex$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.sync.MutexImpl",
      "fields": [
        {
          "name": "owner$volatile"
        }
      ]
    },
    {
      "type": "kotlinx.coroutines.sync.SemaphoreAndMutexImpl",
      "fields": [
        {
          "name": "_availablePermits$volatile"
        },
        {
          "name": "deqIdx$volatile"
        },
        {
          "name": "enqIdx$volatile"
        },
        {
          "name": "head$volatile"
        },
        {
          "name": "tail$volatile"
        }
      ]
    },
    {
      "type": "sun.security.provider.NativePRNG",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.security.SecureRandomParameters"
          ]
        }
      ]
    },
    {
      "type": "sun.security.provider.SHA",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    }
  ],
  "resources": [
    {
      "glob": "META-INF/services/io.ktor.client.HttpClientEngineContainer"
    },
    {
      "glob": "META-INF/services/io.ktor.serialization.kotlinx.KotlinxSerializationExtensionProvider"
    },
    {
      "glob": "META-INF/services/java.lang.System$LoggerFinder"
    },
    {
      "glob": "META-INF/services/java.nio.channels.spi.SelectorProvider"
    },
    {
      "glob": "META-INF/services/kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition"
    },
    {
      "glob": "META-INF/services/kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper"
    },
    {
      "glob": "META-INF/services/org.slf4j.spi.SLF4JServiceProvider"
    },
    {
      "glob": "org/slf4j/impl/StaticLoggerBinder.class"
    }
  ],
  "bundles": [],
  "jni": [
    {
      "type": "java.lang.Boolean",
      "methods": [
        {
          "name": "getBoolean",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    }
  ]
}